#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 72 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 170 151 240 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 927 0 29 3 12 #"#lang racket"
0 0 25 3 1 #" "
0 0 17 3 37 #"#| CSC324 Summer 2020 Assignment 1 |#"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"Module: rake_errors"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"Description: Assignment 1: The Rake Interpreter"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"   ___             _               \\\\"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"  | _ \\   __ _    | |__    ___      \\\\"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"  |   /  / _` |   | / /   / -_)      \\\\"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"  |_|_\\  \\__,_| "
0 0 17 3 24 #"  |_\\_\\   \\___|       \\\\"
0 0 17 29 1 #"\n"
0 0 17 3 42
#"_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|    ///\\\\\\"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'   ///  \\\\\\"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 73
(4
 #"This code is provided solely for the personal and private use of stu"
 #"dents"
) 0 0 17 29 1 #"\n"
0 0 17 3 69
(5
 #"taking the CSC324 course at the University of Toronto. Copying for p"
 #"u"
) 0 0 17 3 6 #"rposes"
0 0 17 29 1 #"\n"
0 0 17 3 73
(6
 #"other than this use is expressly prohibited. All forms of distributi"
 #"on of"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(7
 #"this code, including but not limited to public repositories on GitHu"
 #"b,"
) 0 0 17 29 1 #"\n"
0 0 17 3 73
(8
 #"GitLab, Bitbucket, or any other online platform, whether as given or"
 #" with"
) 0 0 17 29 1 #"\n"
0 0 17 3 30 #"any changes, are expressly pro"
0 0 17 3 8 #"hibited."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"Copyright: (c) University of Toronto"
0 0 17 29 1 #"\n"
0 0 17 3 70
(9
 #"               CSC324 Principles of Programming Languages, Summer 20"
 #"20"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 1 #" "
0 0 14 3 15 #"run-interpreter"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"racket/hash"
0 0 25 3 3 #")  "
0 0 17 3 54 #"; You may use the functions imported from this module."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"rake_errors.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 90
(10
 #";-------------------------------------------------------------------"
 #"----------------------"
) 0 0 25 29 1 #"\n"
0 0 17 3 52 #"; Main functions (skeleton provided in starter code)"
0 0 25 29 1 #"\n"
0 0 17 3 90 10 0 0 25 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"(run-interpreter "
0 0 17 3 12 #"prog) -> any"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"  prog: datum?"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"    A syntactically-valid Rake program."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 88
(11
 #"  Evaluates the Rake program and returns its value, or raises an err"
 #"or if the program is"
) 0 0 17 29 1 #"\n"
0 0 17 3 25 #"  not semantically valid."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"run-interpreter"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 5 #"))) ("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 25 3 3 #") ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 4 #"))] "
0 0 17 3 39 #";base case ie. it is bool, number or ID"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 14 #"construct-hash"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 3 #") ("
0 0 14 3 4 #"last"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"construct-hash"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"make-immutable-hash"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 10 #"first-prog"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 10 #"first-prog"
0 0 25 3 4 #")) ("
0 0 14 3 14 #"construct-hash"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 10 #"first-prog"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 15 3 3 #"def"
0 0 25 3 3 #") ("
0 0 14 3 8 #"hash-set"
0 0 25 3 2 #" ("
0 0 14 3 14 #"construct-hash"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 10 #"first-prog"
0 0 25 3 3 #") ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 10 #"first-prog"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 14 #"construct-hash"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"prog"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          )"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"(interpret env expr) "
0 0 17 3 6 #"-> any"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"  env: hash?"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"    The environment with which to evaluate the expression."
0 0 17 29 1 #"\n"
0 0 17 3 14 #"  expr: datum?"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"    A syntactically-valid Rake expression."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 71
(12
 #"  Returns the value of the Rake expression under the given environme"
 #"nt."
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"i"
0 0 14 3 8 #"nterpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"symbol?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 12 #"report-error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 12 #"unbound-name"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"integer?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 4 #"expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"boolean?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 4 #"expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 8 #"builtin?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 25 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 25 3 1 #" "
0 0 14 3 8 #"builtins"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"number"
0 0 25 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 6 #"number"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 6 #"fourth"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 22 3 1 #"`"
0 0 25 3 1 #"("
0 0 29 3 1 #","
0 0 25 3 1 #"("
0 0 14 3 7 #"helper2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 5 #"))) ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"env2"
0 0 25 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 10 #"hash-union"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 4 #"env2"
0 0 25 3 3 #") ("
0 0 14 3 5 #"third"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            )"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 8 #"function"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"hash-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ["
0 0 14 3 10 #"trans_expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"number"
0 0 25 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 6 #"number"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            [("
0 0 14 3 13 #"hash-has-key?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"trans_expr"
0 0 25 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 2 #") "
0 0 14 3 10 #"trans_expr"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 6 #")))) ("
0 0 14 3 8 #"hash-ref"
0 0 25 3 1 #" "
0 0 14 3 13 #"error-strings"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 14 #"arity-mismatch"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 1 #" "
0 0 14 3 10 #"trans_expr"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            )"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          )"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       )"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"helper2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"helper2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 7 #"helper2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      )"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 4 #"env2"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 1 #" "
0 0 14 3 10 #"trans_expr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 25 3 1 #" "
0 0 14 3 5 #"param"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"param"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"make-immutable-hash"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 8 #"hash-set"
0 0 25 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 5 #"param"
0 0 25 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 5 #"param"
0 0 25 3 3 #") ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 90 10 0 0 25 29 1 #"\n"
0 0 17 3 32 #"; Helpers: Builtins and closures"
0 0 25 29 1 #"\n"
0 0 17 3 90 10 0 0 25 29 1 #"\n"
0 0 17 3 88
(13
 #"; A hash mapping symbols for Rake builtin functions to their corresp"
 #"onding Racket value."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"builtins"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"hash"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 1 #"'"
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 1 #"'"
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"<"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 1 #"'"
0 0 14 3 8 #"integer?"
0 0 25 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 1 #"'"
0 0 14 3 8 #"boolean?"
0 0 25 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 85
(14
 #"; Note: You'll almost certainly need to replace procedure? here to p"
 #"roperly return #t"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 62
#"; when given your closure data structure at the end of Task 1!"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 1 #"'"
0 0 14 3 10 #"procedure?"
0 0 25 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"   ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#"; Returns whether a given symbol refers to a builtin Rake function."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"builtin?"
0 0 25 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 25 3 3 #") ("
0 0 14 3 13 #"hash-has-key?"
0 0 25 3 1 #" "
0 0 14 3 8 #"builtins"
0 0 25 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 77
(15
 #"Starter definition for a closure \"struct\". Racket structs behave s"
 #"imilarly to"
) 0 0 17 29 1 #"\n"
0 0 17 3 59
#"C structs (contain fields but no methods or encapsulation)."
0 0 17 29 1 #"\n"
0 0 17 3 67
#"Read more at https://docs.racket-lang.org/guide/define-struct.html."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 82
(16
 #"You can and should modify this as necessary. If you're having troubl"
 #"e working with"
) 0 0 17 29 1 #"\n"
0 0 17 3 83
(17
 #"Racket structs, feel free to switch this implementation to use a lis"
 #"t/hash instead."
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"closure"
0 0 25 3 2 #" ("
0 0 14 3 6 #"params"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 9        1123 22           0 0           0 186 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 2 #"42"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 1 #" "
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 14 3 3 #"fun"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")) "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 2 #"42"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 3 #"fun"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 4 #"))) "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 25 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 10 #"make-adder"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 3 #"fun"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 25 3 2 #" ("
0 0 14 3 1 #"m"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #"m"
0 0 25 3 4 #"))) "
0 0 22 3 1 #"'"
0 0 14 3 7 #"add-one"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 10 #"make-adder"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 7 #"add-two"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 10 #"make-adder"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                            "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"add-one"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #") ("
0 0 14 3 7 #"add-two"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 3 #")))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
